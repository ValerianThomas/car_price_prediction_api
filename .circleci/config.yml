version: 2

defaults: &defaults
  docker:
      - image: circleci/python:3.7.2
  working_directory: ~/project

prepare_env: &prepare_env
    run:
      name: Create venv
      command: |
        python3 -m venv venv
        source venv/bin/activate
        pip install --upgrade pip

fetch_data: &fetch_data
      run: 
        name: Create venvSet script permission and fetch data
        command: |
          source venv/bin/activate
          chmod +x ./scripts/fetch_kaggle_dataset.sh
          ./scripts/fetch_kaggle_dataset.sh

jobs:
  test_regression_model:
    <<: *defaults
    steps:
      - checkout
      - *prepare_env
      - run:
          name: Install requirements
          command: |
            . venv/bin/activate
            pip install -r API/model/requirements.txt
      - *fetch_data
      - run:
          name: Train model
          command: |
            . venv/bin/activate
            python3 run_training.py
      - run:
          name: Test the model
          command: |
            . venv/bin/activate
            py.test model_testing.py

  test_server:
    <<: *defaults
    steps: 
      - checkout
      - *prepare_env
      - run:
          name: Run server
          command: |
            . venv/bin/activate
            pip install -r API/api/requirements.txt
            set FLASK_APP=run.py
            python3 run.py
          background: true
      - run:
          name: wait for server to boot
          command: |
             wget --retry-connrefused --waitretry=1 --read-timeout=20 --timeout=15 -t 10 http://localhost:5000/health
      - run:
          name: Test server health
          command: |
            . venv/bin/activate
            py.test check_server_health.py
      - run: 
          name: Test api prediction endpoint
          command: |
            . venv/bin/activate
            py.test check_api_prediction_endpoint.py


workflows:
  version: 2
  build-test-and-deploy:
    jobs:
      - test_regression_model
      - test_server:
          requires:
          - test_regression_model